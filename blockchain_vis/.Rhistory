load("~/Data/NUYadhdData.rdata")
View(ADHD)
load("~/Data/NUYadhdData.rdata")
data(aal116coordinates)
install.packages("JointNets")
library(JointNets)
data(aal116coordinates)
install.packages("NIfTI")
install.packages("oro.nifti")
library(oro.nifti)
data <- readNIfTI(file.choose())
data
data[0]
install.packages("neurobase")
library(neurobase)
data <- readnii(file.choose())
data
image(data)
dim(data)
slotNames(data)
data@.Data
data@db_name
data@dim_info
data <- readNIfTI2(file.choose())
data@db_name
data@descrip
data@.Data
data@data_type
data@reoriented
data(file.choose())
data(file.choose())
file.choose()
data("/Users/jingming/Downloads/aal_roi_atlas.nii.gz")
data(aal116coordinates)
data('aal116coordinates')
library(JointNets)
data(aal116coordinates)
data(nip_37_data)
load("~/Downloads/aal116coordinates.rda")
View(aal116coordinates)
coords <- []
coords <- array()
aal <- aal116coordinates
aal$x.mni
tsv_file <- file.choose()
read.delim(tsv_file)
df <- read.delim(tsv_file)
install.packages("spread")
library(spread)
dd <- spread(df,'实验','教师评分')
install.packages("tidyr")
detach("package:spread", unload = TRUE)
spread(df,df$实验,df$教师评分)
library(tidyr)
spread(df,df$实验,df$教师评分)
df <- as.data.frame(df)
spread(df,df$实验,df$教师评分)
df <- read.delim(file.choose())
df
dd <- spread(df,df$实验,df$教师评分)
dd <- spread(df,df$实验,df$教师评分)
rlang::last_error()
rlang::last_trace()
dd <- spread(df,as.character(df$实验),df$教师评分)
dd <- spread(df[:10],as.character(df$实验),df$教师评分)
dd <- spread(df[,:10],as.character(df$实验),df$教师评分)
dd <- spread(df[:,10],as.character(df$实验),df$教师评分)
dd <- spread(df[1:10,],as.character(df$实验),df$教师评分)
dd <- spread(df[1:2,],as.character(df$实验),df$教师评分)
dd <- spread(df[,1:10],as.character(df$实验),df$教师评分)
df$实验
dd <- spread(df[1,3,4],as.character(df$实验),df$教师评分)
dd <- spread(df[1,3,4],df$实验,df$教师评分)
df1 <- read.delim(file.choose())
dd <- spread(df1,df1$实验,df1$教师评分)
dd <- spread(df1,实验,教师评分)
dd <- spread(df,实验,教师评分)
dd
write.csv(dd,file.choose())
write.csv(dd
)
write.csv(dd,file.choose())
write.csv(dd,'d.csv')
f = file.choose()
df = read.csv(f)
hist(df)
hist(df$value)
hist(df$value,breaks = 1)
hist(df$value,breaks = 10)
hist(df$value,breaks = 20)
hist(df$value,breaks = 30)
d<-density(df$value)
plot(d)
plot(df)
install.packages("xy")
install.packages("SetMethods")
plot(df[1:])
plot(df[1,:])
plot(df[1:,])
df[1:1]
df[1]
df[2:,2:]
df[:,1]
df[1,]
df[2,]
df[2:,]
df[:2,]
df[-1,]
df[-2,]
df[-1,:]
df[-1,]
df[1:,1:]
df[,2:]
df[1:2,1:2]
df[2:2,1:2]
df[2:-1,1:2]
df[2:,1:2]
df[2,1:2]
df[1,1]
df[1,2]
df[2,2]
df[1,2]
df[1,1]
df[2,1]
df[2,:]
install.packages(c("cli", "codetools", "data.table", "digest", "dplyr", "generics", "glue", "KernSmooth", "MASS", "mgcv", "nlme", "pillar", "R6", "Rcpp", "rlang", "stringi", "survival", "tibble", "tidyr", "vctrs"))
install.packages("networkD3")
library(networkD3)
setwd("~/Code/GitHub/colorwall/blockchain_vis")
data <- jsonlite::read_json('data.json')
sankeyNetwork(Links = data$links, Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
sankeyNetwork(Links = data$links,Nodes = data$nodes,NodeID = "name")
sankeyNetwork(Links = data$links,Nodes = data$nodes)
library("rjson")
install.packages("rjson")
data <- fromJSON(file="data.json")
library("rjson")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data1 <- data[data$links$value>10]
data1$nodes <- data$nodes
data1$links <- data$links[value>10]
data1$links <- filter(data$links,value>10)
data$links[data$links$value>10]
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
data <- jsonlite::fromJSON("data.json")
sankeyNetwork(Links = data$links,Nodes = data$nodes,Source = "source",
Target = "target", Value = "value", NodeID = "name")
